import React, { useEffect, useState } from 'react';

import dayjs from 'dayjs';
import { useToast } from 'rn-ui-kit';
import { TabItem } from 'rn-ui-kit/lib/typescript/components/TabControl';

import {
  TaskCardBottomBanner,
  TaskCardBottomButton,
} from '@/components/TabScreens/TaskCard/TaskCardBottom';
import { TaskCardDescription } from '@/components/TabScreens/TaskCard/TaskCardDescription';
import { TaskCardReport } from '@/components/TabScreens/TaskCard/TaskCardReport';
import { useAppSelector } from '@/store';
import { useGetTaskQuery, usePatchTaskMutation } from '@/store/api/tasks';
import { selectAuth } from '@/store/slices/auth/selectors';
import { StatusType, TaskTab, TaskType } from '@/types/task';

export const useTaskCard = (taskId: string) => {
  const [tab, setTab] = useState<TaskTab>(TaskTab.DESCRIPTION);
  const [budgetModalVisible, setBudgetModalVisible] = useState(false);
  const [cancelModalVisible, setCancelModalVisible] = useState(false);
  const [uploadModalVisible, setUploadModalVisible] = useState(false);

  const toast = useToast();
  const { user } = useAppSelector(selectAuth);

  const getTask = useGetTaskQuery(taskId);

  useEffect(() => {
    if (
      getTask?.error &&
      'data' in getTask?.error &&
      getTask?.error?.data?.message
    ) {
      toast.show({
        type: 'error',
        title: getTask?.error?.data?.message,
        contentHeight: 120,
      });
    }
  }, [getTask?.error]);

  const [patchTask] = usePatchTaskMutation();

  const task = getTask?.data?.tasks?.[0];
  const id = task?.ID || 0;
  const subsetID = task?.subsetID || '';
  const files = task?.files || [];
  const startTime = task?.startTime || '';
  const endTime = task?.endTime || '';
  const contacts = task?.contacts || [];
  const endTimePlan = task?.endTimePlan || '';
  const address = task?.object?.name || '';
  const description = task?.description || '';
  const statusID: StatusType | undefined = task?.statusID;
  const outlayStatusID = task?.outlayStatusID;
  const name = task?.name || '';
  const budget = `${task?.budget} ‚ÇΩ` || '';
  const isNight = task?.isNight || false;
  const isUrgent = task?.isUrgent || false;
  const publicTime = task?.publicTime
    ? `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${dayjs(task?.publicTime).format('DD MMMM –≤ HH:mm')}`
    : '';
  const budgetEndTime = task?.endTimePlan
    ? `–°—Ä–æ–∫ –ø–æ–¥–∞—á–∏ —Å–º–µ—Ç—ã –¥–æ ${dayjs(task?.endTimePlan).format(
        'DD MMMM –≤ HH:mm'
      )}`
    : '';

  const tabs: TabItem[] = [
    {
      id: 0,
      label: TaskTab.DESCRIPTION,
      icon: false,
    },
    {
      id: 1,
      label: TaskTab.ESTIMATE,
      icon: false,
    },
    {
      id: 2,
      label: TaskTab.COMMENTS,
      icon: false,
    },
    {
      id: 3,
      label: TaskTab.REPORT,
      icon: false,
    },
    {
      id: 4,
      label: TaskTab.HISTORY,
      icon: false,
    },
  ];

  const onBudgetModalVisible = () => {
    setBudgetModalVisible(!budgetModalVisible);
  };
  const onUploadModalVisible = () => {
    setUploadModalVisible(!uploadModalVisible);
  };
  const onBudgetSubmission = () => {
    //
  };
  const onTaskSubmission = async () => {
    try {
      await patchTask({
        //id —Ç–∞—Å–∫–∏
        ID: id,
        //—Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–±–æ—Ç—É
        statusID: 11,
        //id –ø—Ä–æ—Ñ–∏–ª—è
        executors: [{ ID: user?.userID }],
      }).unwrap();
    } catch (error) {
      if (
        typeof error === 'object' &&
        error !== null &&
        'data' in error &&
        typeof error.data === 'object' &&
        error.data !== null &&
        'message' in error.data &&
        typeof error.data.message === 'string'
      ) {
        toast.show({
          type: 'error',
          title: error.data.message,
          contentHeight: 120,
        });
      }
    } finally {
      getTask.refetch();
    }
  };
  const onCancelModalVisible = () => {
    setCancelModalVisible(!cancelModalVisible);
  };
  const onWorkDelivery = async () => {
    await patchTask({
      //id —Ç–∞—Å–∫–∏
      ID: id,
      //–ø–µ—Ä–µ–≤–æ–¥ —Ç–∞—Å–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å –°–¥–∞—á–∞ —Ä–∞–±–æ—Ç
      statusID: 5,
    });
    getTask.refetch();
  };
  const onChangeEndTimePlan = async (time: string) => {
    //–ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª—é–±–æ–≥–æ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ —Ç—Ä–∏ –ø–æ–ª—è
    await patchTask({
      //id —Ç–∞—Å–∫–∏
      ID: id,
      //–ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      endTimePlan: time,
      //—Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      endTime,
      //—Å—Ä–æ–∫ –Ω–∞—á–∞–ª–∞
      startTime,
    });
    getTask.refetch();
  };
  const onCancelTask = async (text: string) => {
    //–µ—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–µ, —Ç–æ
    //–ø–µ—Ä–≤—ã–π –æ—Ç–∫–ª–∏–∫ - –ø–∞—Ç—á –∑–∞–¥–∞–Ω–∏—è, refuseReason, id –∑–∞–¥–∞–Ω–∏—è
    //–µ—Å–ª–∏ –ª–æ—Ç—ã —Ç–æ - –ø–∞—Ç—á –æ—Ñ—Ñ–µ—Ä–∞, id –æ—Ñ—Ñ–µ—Ä–∞, taskID, refuseReason
    //–≤ –ò–¢ —Ç–∞–º –≤—Å–µ –∏–Ω–∞—á–µ üôÇ
    await patchTask({
      //id —Ç–∞—Å–∫–∏
      ID: id,
      //–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞
      refuseReason: text,
    });
    getTask.refetch();
    onCancelModalVisible();
  };
  const onRevokeBudget = () => {
    //TODO –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ—Ñ–µ—Ä —é–∑–µ—Ä–∞ –ø–æ —ç—Ç–æ–π —Ç–∞—Å–∫–µ
    //https://sandbox8.apteka-april.ru/api/offers?query=?taskID==977*userID==81?
    //–¥–∞–ª–µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ñ—Ñ–µ—Ä —á–µ—Ä–µ–∑ DELETE offers/id
    setBudgetModalVisible(!budgetModalVisible);
  };
  const getCurrentTab = () => {
    switch (tab) {
      case '–û–ø–∏—Å–∞–Ω–∏–µ':
        return (
          <TaskCardDescription
            statusID={statusID}
            description={description}
            address={address}
            startTime={startTime}
            endTimePlan={endTimePlan}
            contacts={contacts}
            files={files}
            onChangeEndTimePlan={onChangeEndTimePlan}
          />
        );
      case '–û—Ç—á–µ—Ç':
        return (
          <TaskCardReport
            activeBudgetCanceled={!!getBanner()}
            statusID={statusID}
            files={files}
            taskId={taskId}
            uploadModalVisible={uploadModalVisible}
            onUploadModalVisible={onUploadModalVisible}
          />
        );
      default:
        return <></>;
    }
  };
  const onTabChange = (item: TabItem) => {
    setTab(item.label as TaskTab);
  };
  const getBanner = (): TaskCardBottomBanner => {
    if (tab === '–û–ø–∏—Å–∞–Ω–∏–µ') {
      switch (statusID) {
        case StatusType.ACTIVE:
          if (outlayStatusID === 4) {
            return {
              title: '–í–∞—à–∞ —Å–º–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º',
              type: 'error',
              icon: 'alert',
              text: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —ç—Ç–æ–π –∑–∞–¥–∞—á–∏',
            };
          }
          return null;
        case StatusType.SUMMARIZING:
          return {
            title: '–ó–∞–¥–∞—á–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            type: 'info',
            icon: 'info',
            text: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É',
          };
        case StatusType.COMPLETED:
          return {
            title: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø—Ä–∏–Ω—è—Ç—ã',
            type: 'success',
            icon: 'success',
            text: '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–∏—Ç –Ω–∞ –≤–∞—à—É –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É/—Å—á–µ—Ç',
          };
        case StatusType.PAID:
          return {
            title: '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞',
            type: 'success',
            icon: 'success',
            text: '–î–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤–∞–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã',
          };
        case StatusType.CANCELLED_BY_CUSTOMER:
        case StatusType.CANCELLED_BY_EXECUTOR:
          return {
            title: '–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
            type: 'error',
            icon: 'alert',
            text: '–ü–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ',
          };
        default:
          return null;
      }
    }
    return null;
  };
  const getButtons = (): TaskCardBottomButton[] => {
    switch (statusID) {
      case StatusType.ACTIVE:
        if (outlayStatusID === 2) {
          return [
            {
              label: '–û—Ç–æ–∑–≤–∞—Ç—å —Å–º–µ—Ç—É',
              variant: 'outlineDanger',
              onPress: onBudgetModalVisible,
            },
          ];
        }
        if (outlayStatusID === 1) {
          return subsetID === TaskType.COMMON_FIRST_RESPONCE
            ? [
                {
                  label: '–ü—Ä–∏–Ω—è—Ç—å –∑–∞–¥–∞—á—É',
                  variant: 'accent',
                  onPress: onTaskSubmission,
                },
              ]
            : [
                {
                  label: '–ü–æ–¥–∞—Ç—å —Å–º–µ—Ç—É',
                  variant: 'accent',
                  onPress: onBudgetSubmission,
                },
              ];
        }
        return [];
      case StatusType.WORK:
        if (tab === '–û—Ç—á–µ—Ç') {
          if (files.length) {
            return [
              {
                label: '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—ã',
                variant: 'accent',
                onPress: onWorkDelivery,
              },
              {
                label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã',
                variant: 'outlineAccent',
                onPress: onUploadModalVisible,
              },
            ];
          }
          return [
            {
              label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã',
              variant: 'accent',
              onPress: onUploadModalVisible,
            },
          ];
        }
        return [
          {
            label: '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—ã',
            variant: 'accent',
            onPress: onWorkDelivery,
          },
          {
            label: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞—á–∏',
            variant: 'outlineDanger',
            onPress: onCancelModalVisible,
          },
        ];
      case StatusType.SUMMARIZING:
      case StatusType.COMPLETED:
      case StatusType.PAID:
        if (tab === '–û—Ç—á–µ—Ç') {
          return [
            {
              label: '–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã',
              variant: 'accent',
              onPress: onUploadModalVisible,
            },
          ];
        }
        return [];
      case StatusType.PENDING:
        return [
          {
            label: '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—ã',
            variant: 'accent',
            onPress: onWorkDelivery,
          },
          {
            label: '–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–¥–∞—á–∏',
            variant: 'outlineDanger',
            onPress: onCancelModalVisible,
          },
        ];
      default:
        return [];
    }
  };

  return {
    onTabChange,
    tabs,
    getCurrentTab,
    id,
    name,
    budget,
    isNight,
    publicTime,
    isUrgent,
    budgetEndTime,
    getBanner,
    getButtons,
    budgetModalVisible,
    onBudgetModalVisible,
    onRevokeBudget,
    cancelModalVisible,
    onCancelModalVisible,
    onCancelTask,
    subsetID,
    statusID,
  };
};
